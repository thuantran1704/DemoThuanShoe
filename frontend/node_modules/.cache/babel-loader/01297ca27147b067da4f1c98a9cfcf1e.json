{"ast":null,"code":"var _jsxFileName = \"D:\\\\projects React\\\\Demo\\\\frontend\\\\src\\\\screens\\\\BrandEditScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Button, Form } from 'react-bootstrap-v5';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport FormContainer from '../components/FormContainer';\nimport { listBrandDetails, updateBrand } from '../actions/brandActions';\nimport { BRAND_UPDATE_RESET } from '../constants/brandConstants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst BrandEditScreen = ({\n  match,\n  history\n}) => {\n  _s();\n\n  const brandId = match.params.id;\n  const [name, setName] = useState('');\n  const [description, setDescription] = useState('');\n  const [message, setMessage] = useState(null);\n  const dispatch = useDispatch();\n  const brandDetails = useSelector(state => state.brandDetails);\n  const {\n    loading,\n    error,\n    brand\n  } = brandDetails;\n  const brandUpdate = useSelector(state => state.brandUpdate);\n  const {\n    loading: loadingUpdate,\n    error: errorUpdate,\n    success: successUpdate\n  } = brandUpdate;\n  useEffect(() => {\n    if (!brand) {\n      console.log('brand');\n      dispatch(listBrandDetails(brandId));\n    } else {\n      setName(brand.name);\n      setDescription(brand.description); //history.push('/admin/brandlist')\n    }\n\n    if (successUpdate) {\n      dispatch({\n        type: BRAND_UPDATE_RESET\n      });\n      history.push('/admin/brandlist');\n    }\n  }, [dispatch, history, brandId, brand, successUpdate]);\n\n  const submitHandler = e => {\n    e.preventDefault();\n\n    if (name.trim() === \"\") {\n      setMessage('Name must not be empty !');\n    } else if (description.trim() === \"\") {\n      setMessage('Description must not be empty !');\n    } else {\n      dispatch(updateBrand(brandId, name, description));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      to: \"/admin/brandlist\",\n      className: \"btn btn-light my-3\",\n      children: \" Go Back \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FormContainer, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Edit Brand\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this), loadingUpdate && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 35\n      }, this), errorUpdate && /*#__PURE__*/_jsxDEV(Message, {\n        variant: \"danger\",\n        children: errorUpdate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 33\n      }, this), loading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 28\n      }, this) : error ? /*#__PURE__*/_jsxDEV(Message, {\n        variant: \"danger\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 31\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [message && /*#__PURE__*/_jsxDEV(Message, {\n          variant: \"danger\",\n          children: [\" \", message, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 45\n        }, this), /*#__PURE__*/_jsxDEV(Form, {\n          onSubmit: submitHandler,\n          children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"name\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"name\",\n              placeholder: \"Enter name\",\n              value: name,\n              onChange: e => setName(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"description\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              placeholder: \"Enter description\",\n              value: description,\n              onChange: e => setDescription(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            variant: \"primary\",\n            children: \"Update\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 33\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(BrandEditScreen, \"VBaAjD3CFpLTjoiDIoQCvhMbaz0=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = BrandEditScreen;\nexport default BrandEditScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"BrandEditScreen\");","map":{"version":3,"sources":["D:/projects React/Demo/frontend/src/screens/BrandEditScreen.js"],"names":["React","useState","useEffect","Link","useDispatch","useSelector","Button","Form","Message","Loader","FormContainer","listBrandDetails","updateBrand","BRAND_UPDATE_RESET","BrandEditScreen","match","history","brandId","params","id","name","setName","description","setDescription","message","setMessage","dispatch","brandDetails","state","loading","error","brand","brandUpdate","loadingUpdate","errorUpdate","success","successUpdate","console","log","type","push","submitHandler","e","preventDefault","trim","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Button, Form } from 'react-bootstrap-v5'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\nimport FormContainer from '../components/FormContainer'\r\nimport { listBrandDetails, updateBrand } from '../actions/brandActions'\r\nimport { BRAND_UPDATE_RESET } from '../constants/brandConstants'\r\n\r\nconst BrandEditScreen = ({ match, history }) => {\r\n    const brandId = match.params.id\r\n\r\n    const [name, setName] = useState('')\r\n    const [description, setDescription] = useState('')\r\n    const [message, setMessage] = useState(null)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const brandDetails = useSelector(state => state.brandDetails)\r\n    const { loading, error, brand } = brandDetails\r\n\r\n    const brandUpdate = useSelector(state => state.brandUpdate)\r\n    const { loading: loadingUpdate, error: errorUpdate, success: successUpdate } = brandUpdate\r\n\r\n    useEffect(() => {\r\n        if (!brand) {\r\n            console.log('brand')\r\n            dispatch(listBrandDetails(brandId))\r\n            \r\n        } else {\r\n            setName(brand.name)\r\n            setDescription(brand.description)\r\n            //history.push('/admin/brandlist')\r\n        }\r\n        if (successUpdate) {\r\n            dispatch({ type: BRAND_UPDATE_RESET })\r\n            history.push('/admin/brandlist')\r\n        } \r\n\r\n    }, [dispatch, history, brandId, brand, successUpdate])\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        if (name.trim() === \"\") {\r\n            setMessage('Name must not be empty !')\r\n        }\r\n        else if (description.trim() === \"\") {\r\n            setMessage('Description must not be empty !')\r\n        }\r\n\r\n        else {\r\n            dispatch(updateBrand(brandId, name, description))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Link to='/admin/brandlist' className='btn btn-light my-3'> Go Back </Link>\r\n\r\n            <FormContainer>\r\n                <h1>Edit Brand</h1>\r\n                {loadingUpdate && <Loader />}\r\n                {errorUpdate && <Message variant='danger'>{errorUpdate}</Message>}\r\n                {loading ? <Loader />\r\n                    : error ? <Message variant='danger'>{error}</Message>\r\n                        : (\r\n                            <>\r\n                                {message && <Message variant='danger'> {message} </Message>}\r\n\r\n                                <Form onSubmit={submitHandler}>\r\n                                    <Form.Group controlId='name'>\r\n                                        <Form.Label>Name</Form.Label>\r\n                                        <Form.Control type='name' placeholder='Enter name' value={name}\r\n                                            onChange={(e) => setName(e.target.value)}></Form.Control>\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group controlId='description'>\r\n                                        <Form.Label>Description</Form.Label>\r\n                                        <Form.Control type='text' placeholder='Enter description' value={description}\r\n                                            onChange={(e) => setDescription(e.target.value)}></Form.Control>\r\n                                    </Form.Group>\r\n\r\n                                    <Button type='submit' variant='primary'>\r\n                                        Update\r\n                                    </Button>\r\n                                </Form>\r\n                            </>\r\n                        )\r\n                }\r\n            </FormContainer>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default BrandEditScreen"]},"metadata":{},"sourceType":"module"}