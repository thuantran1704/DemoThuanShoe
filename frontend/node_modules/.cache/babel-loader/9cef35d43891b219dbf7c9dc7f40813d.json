{"ast":null,"code":"var _jsxFileName = \"D:\\\\projects React\\\\proShop\\\\frontend\\\\src\\\\screens\\\\UserEditScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Button, Form } from 'react-bootstrap';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport FormContainer from '../components/FormContainer';\nimport { getUserDetail, updateUser } from '../actions/userActions';\nimport { USER_UPDATE_RESET } from '../constants/userConstants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst UserEditScreen = ({\n  match,\n  history\n}) => {\n  _s();\n\n  const userId = match.params.id;\n  const [email, setEmail] = useState('');\n  const [name, setName] = useState('');\n  const [isAdmin, setIsAdmin] = useState(false);\n  const dispatch = useDispatch();\n  const userDetail = useSelector(state => state.userDetail);\n  const {\n    loading,\n    error,\n    user\n  } = userDetail;\n  const userUpdate = useSelector(state => state.userUpdate);\n  const {\n    loading: loadingUpdate,\n    error: errorUpdate,\n    success: successUpdate\n  } = userUpdate;\n  useEffect(() => {\n    if (successUpdate) {\n      dispatch({\n        type: USER_UPDATE_RESET\n      });\n      history.push('/admin/userlist');\n    } else {}\n\n    if (!user.name || user._id !== userId) {\n      dispatch(getUserDetail(userId));\n    } else {\n      setName(user.name);\n      setEmail(user.email);\n      setIsAdmin(user.isAdmin);\n    }\n  }, [dispatch, userId, user]);\n\n  const submitHandler = e => {\n    e.preventDefault(); // Dispatch\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      to: \"/admin/userlist\",\n      className: \"btn btn-light my-3\",\n      children: \" Go Back \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FormContainer, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Edit User\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), loading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 28\n      }, this) : error ? /*#__PURE__*/_jsxDEV(Message, {\n        variant: \"danger\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 31\n      }, this) : /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: submitHandler,\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"name\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"name\",\n            placeholder: \"Enter name\",\n            value: name,\n            onChange: e => setName(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 33\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"email\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Email Address\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"email\",\n            placeholder: \"Enter email\",\n            value: email,\n            onChange: e => setEmail(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 33\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"isAdmin\",\n          children: /*#__PURE__*/_jsxDEV(Form.Check, {\n            type: \"checkbox\",\n            label: \"Is Admin\",\n            value: isAdmin,\n            checked: isAdmin,\n            onChange: e => setIsAdmin(e.target.checked)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 37\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 33\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          variant: \"primary\",\n          children: \"Update\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 33\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(UserEditScreen, \"ZQqBnlyb7716VKvK6Fil+uVlEXU=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = UserEditScreen;\nexport default UserEditScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserEditScreen\");","map":{"version":3,"sources":["D:/projects React/proShop/frontend/src/screens/UserEditScreen.js"],"names":["React","useState","useEffect","Link","useDispatch","useSelector","Button","Form","Message","Loader","FormContainer","getUserDetail","updateUser","USER_UPDATE_RESET","UserEditScreen","match","history","userId","params","id","email","setEmail","name","setName","isAdmin","setIsAdmin","dispatch","userDetail","state","loading","error","user","userUpdate","loadingUpdate","errorUpdate","success","successUpdate","type","push","_id","submitHandler","e","preventDefault","target","value","checked"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Button, Form } from 'react-bootstrap'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\nimport FormContainer from '../components/FormContainer'\r\nimport { getUserDetail, updateUser } from '../actions/userActions'\r\nimport { USER_UPDATE_RESET } from '../constants/userConstants'\r\n\r\nconst UserEditScreen = ({ match, history }) => {\r\n    const userId = match.params.id\r\n\r\n    const [email, setEmail] = useState('')\r\n    const [name, setName] = useState('')\r\n    const [isAdmin, setIsAdmin] = useState(false)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const userDetail = useSelector(state => state.userDetail)\r\n    const { loading, error, user } = userDetail\r\n\r\n    const userUpdate = useSelector(state => state.userUpdate)\r\n    const { loading: loadingUpdate, error: errorUpdate, success: successUpdate } = userUpdate\r\n\r\n    useEffect(() => {\r\n        if (successUpdate) {\r\n            dispatch({ type: USER_UPDATE_RESET })\r\n            history.push('/admin/userlist')\r\n        }else{\r\n\r\n        }\r\n        if (!user.name || user._id !== userId) {\r\n            dispatch(getUserDetail(userId))\r\n        } else {\r\n            setName(user.name)\r\n            setEmail(user.email)\r\n            setIsAdmin(user.isAdmin)\r\n        }\r\n    }, [dispatch, userId, user])\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        // Dispatch\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Link to='/admin/userlist' className='btn btn-light my-3'> Go Back </Link>\r\n\r\n            <FormContainer>\r\n                <h1>Edit User</h1>\r\n                {loading ? <Loader />\r\n                    : error ? <Message variant='danger'>{error}</Message>\r\n                        : (\r\n                            <Form onSubmit={submitHandler}>\r\n                                <Form.Group controlId='name'>\r\n                                    <Form.Label>Name</Form.Label>\r\n                                    <Form.Control type='name' placeholder='Enter name' value={name}\r\n                                        onChange={(e) => setName(e.target.value)}></Form.Control>\r\n                                </Form.Group>\r\n\r\n                                <Form.Group controlId='email'>\r\n                                    <Form.Label>Email Address</Form.Label>\r\n                                    <Form.Control type='email' placeholder='Enter email' value={email}\r\n                                        onChange={(e) => setEmail(e.target.value)}></Form.Control>\r\n                                </Form.Group>\r\n\r\n                                <Form.Group controlId='isAdmin'>\r\n                                    <Form.Check type='checkbox'\r\n                                        label='Is Admin'\r\n                                        value={isAdmin}\r\n                                        checked={isAdmin}\r\n                                        onChange={(e) => setIsAdmin(e.target.checked)}></Form.Check>\r\n                                </Form.Group>\r\n\r\n                                <Button type='submit' variant='primary'>\r\n                                    Update\r\n                                </Button>\r\n                            </Form>\r\n                        )}\r\n            </FormContainer>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default UserEditScreen"]},"metadata":{},"sourceType":"module"}