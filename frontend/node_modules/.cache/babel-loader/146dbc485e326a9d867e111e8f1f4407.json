{"ast":null,"code":"import axios from 'axios';\nimport { GET_STATISTIC_PRODUCT_BETWEEN_DATE_FAIL, GET_STATISTIC_PRODUCT_BETWEEN_DATE_REQUEST, GET_STATISTIC_PRODUCT_BETWEEN_DATE_SUCCESS, GET_STATISTIC_PRODUCT_SOLD_FAIL, GET_STATISTIC_PRODUCT_SOLD_REQUEST, GET_STATISTIC_PRODUCT_SOLD_SUCCESS } from '../constants/statisticConstants';\nexport const listStatisticProductSold = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: GET_STATISTIC_PRODUCT_SOLD_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.get(`/api/statistic`, config);\n    dispatch({\n      type: GET_STATISTIC_PRODUCT_SOLD_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: GET_STATISTIC_PRODUCT_SOLD_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const listStatisticProductBetween = (dateFrom, dateTo) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: GET_STATISTIC_PRODUCT_BETWEEN_DATE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.get(`/api/statistic/between`, {\n      dateFrom,\n      dateTo\n    }, config);\n    dispatch({\n      type: GET_STATISTIC_PRODUCT_BETWEEN_DATE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: GET_STATISTIC_PRODUCT_BETWEEN_DATE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};","map":{"version":3,"sources":["D:/projects React/Demo/frontend/src/actions/statisticActions.js"],"names":["axios","GET_STATISTIC_PRODUCT_BETWEEN_DATE_FAIL","GET_STATISTIC_PRODUCT_BETWEEN_DATE_REQUEST","GET_STATISTIC_PRODUCT_BETWEEN_DATE_SUCCESS","GET_STATISTIC_PRODUCT_SOLD_FAIL","GET_STATISTIC_PRODUCT_SOLD_REQUEST","GET_STATISTIC_PRODUCT_SOLD_SUCCESS","listStatisticProductSold","dispatch","getState","type","userLogin","userInfo","config","headers","Authorization","token","data","get","payload","error","response","message","listStatisticProductBetween","dateFrom","dateTo"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,uCAAT,EAAkDC,0CAAlD,EAA8FC,0CAA9F,EAA0IC,+BAA1I,EAA2KC,kCAA3K,EAA+MC,kCAA/M,QAAyP,iCAAzP;AAEA,OAAO,MAAMC,wBAAwB,GAAG,MAAM,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACxE,MAAI;AACAD,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAEL;AAAR,KAAD,CAAR;AAEA,UAAM;AACFM,MAAAA,SAAS,EAAE;AAAEC,QAAAA;AAAF;AADT,QAEFH,QAAQ,EAFZ;AAIA,UAAMI,MAAM,GAAG;AACXC,MAAAA,OAAO,EAAE;AACLC,QAAAA,aAAa,EAAG,UAASH,QAAQ,CAACI,KAAM;AADnC;AADE,KAAf;AAMA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMjB,KAAK,CAACkB,GAAN,CAAW,gBAAX,EAA4BL,MAA5B,CAAvB;AACAL,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAEJ,kCADD;AAELa,MAAAA,OAAO,EAAEF;AAFJ,KAAD,CAAR;AAIH,GAlBD,CAkBE,OAAOG,KAAP,EAAc;AACZZ,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAEN,+BADD;AAELe,MAAAA,OAAO,EAAEC,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeJ,IAAf,CAAoBK,OAAtC,GACHF,KAAK,CAACC,QAAN,CAAeJ,IAAf,CAAoBK,OADjB,GAEHF,KAAK,CAACE;AAJP,KAAD,CAAR;AAMH;AACJ,CA3BM;AA6BP,OAAO,MAAMC,2BAA2B,GAAG,CAACC,QAAD,EAAWC,MAAX,KAAsB,OAAOjB,QAAP,EAAiBC,QAAjB,KAA8B;AAC3F,MAAI;AACAD,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAER;AAAR,KAAD,CAAR;AAEA,UAAM;AACFS,MAAAA,SAAS,EAAE;AAAEC,QAAAA;AAAF;AADT,QAEFH,QAAQ,EAFZ;AAIA,UAAMI,MAAM,GAAG;AACXC,MAAAA,OAAO,EAAE;AACLC,QAAAA,aAAa,EAAG,UAASH,QAAQ,CAACI,KAAM;AADnC;AADE,KAAf;AAMA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMjB,KAAK,CAACkB,GAAN,CAAW,wBAAX,EAAoC;AAAEM,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,KAApC,EAA0DZ,MAA1D,CAAvB;AACAL,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAEP,0CADD;AAELgB,MAAAA,OAAO,EAAEF;AAFJ,KAAD,CAAR;AAIH,GAlBD,CAkBE,OAAOG,KAAP,EAAc;AACZZ,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAET,uCADD;AAELkB,MAAAA,OAAO,EAAEC,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeJ,IAAf,CAAoBK,OAAtC,GACHF,KAAK,CAACC,QAAN,CAAeJ,IAAf,CAAoBK,OADjB,GAEHF,KAAK,CAACE;AAJP,KAAD,CAAR;AAMH;AACJ,CA3BM","sourcesContent":["import axios from 'axios'\r\nimport { GET_STATISTIC_PRODUCT_BETWEEN_DATE_FAIL, GET_STATISTIC_PRODUCT_BETWEEN_DATE_REQUEST, GET_STATISTIC_PRODUCT_BETWEEN_DATE_SUCCESS, GET_STATISTIC_PRODUCT_SOLD_FAIL, GET_STATISTIC_PRODUCT_SOLD_REQUEST, GET_STATISTIC_PRODUCT_SOLD_SUCCESS } from '../constants/statisticConstants'\r\n\r\nexport const listStatisticProductSold = () => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({ type: GET_STATISTIC_PRODUCT_SOLD_REQUEST })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            },\r\n        }\r\n\r\n        const { data } = await axios.get(`/api/statistic`, config)\r\n        dispatch({\r\n            type: GET_STATISTIC_PRODUCT_SOLD_SUCCESS,\r\n            payload: data\r\n        })\r\n    } catch (error) {\r\n        dispatch({\r\n            type: GET_STATISTIC_PRODUCT_SOLD_FAIL,\r\n            payload: error.response && error.response.data.message\r\n                ? error.response.data.message\r\n                : error.message\r\n        })\r\n    }\r\n}\r\n\r\nexport const listStatisticProductBetween = (dateFrom, dateTo) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({ type: GET_STATISTIC_PRODUCT_BETWEEN_DATE_REQUEST })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            },\r\n        }\r\n\r\n        const { data } = await axios.get(`/api/statistic/between`, { dateFrom, dateTo }, config)\r\n        dispatch({\r\n            type: GET_STATISTIC_PRODUCT_BETWEEN_DATE_SUCCESS,\r\n            payload: data\r\n        })\r\n    } catch (error) {\r\n        dispatch({\r\n            type: GET_STATISTIC_PRODUCT_BETWEEN_DATE_FAIL,\r\n            payload: error.response && error.response.data.message\r\n                ? error.response.data.message\r\n                : error.message\r\n        })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}