{"ast":null,"code":"import axios from 'axios';\nimport { BRAND_DETAILS_REQUEST, BRAND_CREATE_FAIL, BRAND_CREATE_REQUEST, BRAND_CREATE_SUCCESS, BRAND_DELETE_FAIL, BRAND_DELETE_REQUEST, BRAND_DELETE_SUCCESS, BRAND_LIST_FAIL, BRAND_LIST_REQUEST, BRAND_LIST_SUCCESS, BRAND_UPDATE_FAIL, BRAND_UPDATE_REQUEST, BRAND_UPDATE_RESET, BRAND_UPDATE_SUCCESS } from '../constants/brandConstants';\nexport const listBrands = () => async dispatch => {\n  try {\n    dispatch({\n      type: BRAND_LIST_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`/api/brands`);\n    dispatch({\n      type: BRAND_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: BRAND_LIST_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const listBrandDetails = id => async dispatch => {\n  try {\n    dispatch({\n      type: BRAND_DETAILS_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`/api/brands/${id}`);\n    dispatch({\n      type: BRAND_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: BRAND_DETAILS_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const deleteBrand = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: BRAND_DELETE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    await axios.delete(`/api/brands/${id}`, config);\n    dispatch({\n      type: BRAND_DELETE_SUCCESS\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: BRAND_DELETE_FAIL,\n      payload: message\n    });\n  }\n};\nexport const createBrand = (name, description) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: BRAND_CREATE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.post(`/api/brands`, {\n      name,\n      description\n    }, config);\n    dispatch({\n      type: BRAND_CREATE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: BRAND_CREATE_FAIL,\n      payload: message\n    });\n  }\n};\nexport const updateBrand = (brandId, name, description) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: BRAND_UPDATE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.put(`/api/brands/${brandId}`, {\n      brandId,\n      name,\n      description\n    }, config);\n    dispatch({\n      type: BRAND_UPDATE_SUCCESS\n    });\n    dispatch({\n      type: BRAND_LIST_SUCCESS,\n      payload: data\n    });\n    dispatch({\n      type: BRAND_UPDATE_RESET\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: BRAND_UPDATE_FAIL,\n      payload: message\n    });\n  }\n};","map":{"version":3,"sources":["D:/projects React/Demo/frontend/src/actions/brandActions.js"],"names":["axios","BRAND_DETAILS_REQUEST","BRAND_CREATE_FAIL","BRAND_CREATE_REQUEST","BRAND_CREATE_SUCCESS","BRAND_DELETE_FAIL","BRAND_DELETE_REQUEST","BRAND_DELETE_SUCCESS","BRAND_LIST_FAIL","BRAND_LIST_REQUEST","BRAND_LIST_SUCCESS","BRAND_UPDATE_FAIL","BRAND_UPDATE_REQUEST","BRAND_UPDATE_RESET","BRAND_UPDATE_SUCCESS","listBrands","dispatch","type","data","get","payload","error","response","message","listBrandDetails","id","BRAND_DETAILS_SUCCESS","BRAND_DETAILS_FAIL","deleteBrand","getState","userLogin","userInfo","config","headers","Authorization","token","delete","createBrand","name","description","post","updateBrand","brandId","put"],"mappings":"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","sourcesContent":["import axios from 'axios'\r\nimport { BRAND_DETAILS_REQUEST,BRAND_CREATE_FAIL, BRAND_CREATE_REQUEST, BRAND_CREATE_SUCCESS, BRAND_DELETE_FAIL, BRAND_DELETE_REQUEST, BRAND_DELETE_SUCCESS, BRAND_LIST_FAIL, BRAND_LIST_REQUEST, BRAND_LIST_SUCCESS, BRAND_UPDATE_FAIL, BRAND_UPDATE_REQUEST, BRAND_UPDATE_RESET, BRAND_UPDATE_SUCCESS } from '../constants/brandConstants'\r\n\r\nexport const listBrands = () => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: BRAND_LIST_REQUEST })\r\n        const { data } = await axios.get(`/api/brands`)\r\n        dispatch({\r\n            type: BRAND_LIST_SUCCESS,\r\n            payload: data\r\n        })\r\n    } catch (error) {\r\n        dispatch({\r\n            type: BRAND_LIST_FAIL,\r\n            payload: error.response && error.response.data.message\r\n                ? error.response.data.message\r\n                : error.message\r\n        })\r\n    }\r\n}\r\n\r\nexport const listBrandDetails = (id) => async (dispatch) => {\r\n    \r\n    try {\r\n        dispatch({ type: BRAND_DETAILS_REQUEST })\r\n        const { data } = await axios.get(`/api/brands/${id}`)\r\n        dispatch({\r\n            type: BRAND_DETAILS_SUCCESS,\r\n            payload: data\r\n        })\r\n    } catch (error) {\r\n        dispatch({\r\n            type: BRAND_DETAILS_FAIL,\r\n            payload: error.response && error.response.data.message\r\n                ? error.response.data.message\r\n                : error.message\r\n        })\r\n    }\r\n}\r\n\r\nexport const deleteBrand = (id) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: BRAND_DELETE_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            },\r\n        }\r\n\r\n        await axios.delete(`/api/brands/${id}`, config)\r\n\r\n        dispatch({\r\n            type: BRAND_DELETE_SUCCESS,\r\n        })\r\n\r\n    } catch (error) {\r\n        const message =\r\n            error.response && error.response.data.message\r\n                ? error.response.data.message\r\n                : error.message\r\n       \r\n        dispatch({\r\n            type: BRAND_DELETE_FAIL,\r\n            payload: message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const createBrand = (name, description) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: BRAND_CREATE_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            },\r\n        }\r\n\r\n        const { data } = await axios.post(`/api/brands`, { name, description }, config)\r\n\r\n        dispatch({\r\n            type: BRAND_CREATE_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    } catch (error) {\r\n        const message =\r\n            error.response && error.response.data.message\r\n                ? error.response.data.message\r\n                : error.message\r\n       \r\n        dispatch({\r\n            type: BRAND_CREATE_FAIL,\r\n            payload: message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const updateBrand = (brandId, name, description) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: BRAND_UPDATE_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            },\r\n        }\r\n        const { data } = await axios.put(`/api/brands/${brandId}`, { brandId, name, description }, config)\r\n\r\n        dispatch({\r\n            type: BRAND_UPDATE_SUCCESS,\r\n\r\n        })\r\n        dispatch({\r\n            type: BRAND_LIST_SUCCESS,\r\n            payload: data\r\n        })\r\n        dispatch({ type: BRAND_UPDATE_RESET })\r\n\r\n    } catch (error) {\r\n        const message =\r\n            error.response && error.response.data.message\r\n                ? error.response.data.message\r\n                : error.message\r\n\r\n        dispatch({\r\n            type: BRAND_UPDATE_FAIL,\r\n            payload: message,\r\n        })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}