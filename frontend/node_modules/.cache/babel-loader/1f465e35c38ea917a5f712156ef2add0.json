{"ast":null,"code":"import React from 'react';\nimport { Range, Direction } from 'react-range';\nimport { styled } from '@stitches/react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar aspectRatioRegex = /*#__PURE__*/new RegExp(/(\\d+)(:|x)(\\d+)/);\n\nfunction calculateAspectRatio(ratio) {\n  var asNumber = Number(ratio);\n  var asString = String(ratio);\n  var isNumber = !isNaN(asNumber);\n\n  if (isNumber) {\n    return 1 / asNumber * 100;\n  } else {\n    var match = asString.match(aspectRatioRegex);\n    if (!match) throw Error('Please use a valid aspect ratio delimeter, either \"x\" or \":\"');\n    var width = Number(match[1]);\n    var height = Number(match[3]);\n    return height / width * 100;\n  }\n}\n\nfunction isFunction(functionToCheck) {\n  return functionToCheck && {}.toString.call(functionToCheck) === '[object Function]';\n}\n\nvar _excluded = [\"isFocused\"];\nvar PinnedDiv = /*#__PURE__*/styled('div', {\n  width: '100%',\n  height: '100%',\n  top: 0,\n  left: 0,\n  right: 0,\n  bottom: 0,\n  position: 'absolute'\n});\nvar Track = /*#__PURE__*/styled(PinnedDiv, {\n  background: 'transparent',\n  zIndex: 10\n});\nvar RangeWrap = PinnedDiv;\nvar Element = /*#__PURE__*/styled(PinnedDiv, {\n  '> *': {\n    height: '100%'\n  },\n  '> *:not(style) + *': {\n    height: 'unset'\n  }\n});\nvar Handle = /*#__PURE__*/styled('div', {\n  width: 16,\n  height: 16,\n  background: 'white',\n  borderRadius: '100%',\n  border: '1px solid transparent',\n  '&:focus': {\n    outline: 'none',\n    boxShadow: '0 0 0 2px rgba(0, 0, 0, 0.25)',\n    borderColor: 'rgba(0, 0, 0, 1)'\n  }\n});\nvar AspectWrap = /*#__PURE__*/styled('div', {\n  height: 0,\n  position: 'relative'\n});\nvar HandleDecoration = /*#__PURE__*/styled('div', {\n  flex: '1 1 0%',\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'center',\n  justifyContent: 'center',\n  pointerEvents: 'all'\n});\nvar HandleCanvasWrap = /*#__PURE__*/styled('div', {\n  display: 'flex',\n  '&:focus': {\n    outline: 'none'\n  }\n});\nvar HandleWrap = /*#__PURE__*/styled('div', {\n  flexShrink: 0,\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  zIndex: 1\n});\n\nvar DefaultHandle = function DefaultHandle(props) {\n  var rest = _objectWithoutPropertiesLoose(props, _excluded);\n\n  return React.createElement(Handle, Object.assign({}, rest));\n};\n\nvar ComparisonSlider = function ComparisonSlider(_ref) {\n  var itemOne = _ref.itemOne,\n      itemTwo = _ref.itemTwo,\n      aspectRatio = _ref.aspectRatio,\n      defaultValue = _ref.defaultValue,\n      value = _ref.value,\n      _ref$handle = _ref.handle,\n      handle = _ref$handle === void 0 ? DefaultHandle : _ref$handle,\n      _ref$handleBefore = _ref.handleBefore,\n      handleBefore = _ref$handleBefore === void 0 ? null : _ref$handleBefore,\n      _ref$handleAfter = _ref.handleAfter,\n      handleAfter = _ref$handleAfter === void 0 ? null : _ref$handleAfter,\n      _ref$orientation = _ref.orientation,\n      orientation = _ref$orientation === void 0 ? 'horizontal' : _ref$orientation,\n      _ref$onValueChange = _ref.onValueChange,\n      onValueChange = _ref$onValueChange === void 0 ? function () {} : _ref$onValueChange,\n      _ref$onlyHandleDragga = _ref.onlyHandleDraggable,\n      onlyHandleDraggable = _ref$onlyHandleDragga === void 0 ? false : _ref$onlyHandleDragga;\n\n  var _React$useState = React.useState(false),\n      focused = _React$useState[0],\n      setFocused = _React$useState[1];\n\n  var _React$useState2 = React.useState(defaultValue),\n      localValue = _React$useState2[0],\n      setLocalValue = _React$useState2[1];\n\n  var isControlled = typeof defaultValue === 'undefined' && typeof value !== 'undefined';\n  var isHorizontal = orientation === 'horizontal';\n  var sliderValue = isControlled ? value : localValue;\n  var padding = calculateAspectRatio(aspectRatio);\n  var clipPath = isHorizontal ? \"polygon(\" + sliderValue + \"% 0, 100% 0%, 100% 100%, \" + sliderValue + \"% 100%)\" : \"polygon(0% 100%, 0% \" + (100 - sliderValue) + \"%, 100% \" + (100 - sliderValue) + \"%, 100% 100%)\";\n\n  var handleChange = function handleChange(newValue) {\n    if (isControlled) {\n      onValueChange(newValue);\n    } else {\n      setLocalValue(newValue);\n    }\n  };\n\n  var ItemOne = itemOne && isFunction(itemOne) ? itemOne({\n    value: sliderValue\n  }) : itemOne;\n  var ItemTwo = itemTwo && isFunction(itemTwo) ? itemTwo({\n    value: sliderValue\n  }) : itemTwo;\n  var baseSlides = [React.createElement(React.Fragment, null, ItemOne), React.createElement(React.Fragment, null, ItemTwo)];\n  var direction = isHorizontal ? Direction.Right : Direction.Up;\n  var slides = isHorizontal ? baseSlides : baseSlides.reverse();\n  return React.createElement(AspectWrap, {\n    style: {\n      paddingBottom: padding + \"%\"\n    }\n  }, React.createElement(React.Fragment, null, slides.map(function (content, index) {\n    return React.createElement(Element, {\n      style: {\n        clipPath: index === 1 ? clipPath : ''\n      },\n      key: index\n    }, content);\n  })), React.createElement(RangeWrap, null, React.createElement(Range, {\n    step: 1,\n    min: 0,\n    max: 100,\n    values: [sliderValue],\n    onChange: function onChange(values) {\n      return handleChange(values[0]);\n    },\n    direction: direction,\n    renderTrack: function renderTrack(_ref2) {\n      var props = _ref2.props,\n          children = _ref2.children;\n      return React.createElement(Track, Object.assign({\n        className: \"\"\n      }, props, {\n        style: _extends({}, props.style, {\n          pointerEvents: onlyHandleDraggable ? 'none' : 'all'\n        })\n      }), children);\n    },\n    renderThumb: function renderThumb(params) {\n      var props = _extends({}, params.props, {\n        isFocused: focused\n      });\n\n      return React.createElement(HandleCanvasWrap, Object.assign({}, params.props, {\n        style: _extends({}, params.props.style, {\n          flexDirection: isHorizontal ? 'column' : 'row',\n          height: isHorizontal ? '100%' : 'auto',\n          width: isHorizontal ? 'auto' : '100%'\n        }),\n        onFocus: function onFocus() {\n          return setFocused(true);\n        },\n        onBlur: function onBlur() {\n          return setFocused(false);\n        }\n      }), React.createElement(HandleDecoration, null, handleBefore), React.createElement(HandleWrap, {\n        style: {\n          pointerEvents: 'all'\n        }\n      }, handle(props)), React.createElement(HandleDecoration, null, handleAfter));\n    }\n  })));\n};\n\nexport { ComparisonSlider };","map":{"version":3,"sources":["../src/util.ts","../src/index.tsx"],"names":["aspectRatioRegex","calculateAspectRatio","ratio","asNumber","Number","asString","String","isNumber","isNaN","match","Error","width","height","isFunction","functionToCheck","PinnedDiv","styled","top","left","right","bottom","position","Track","background","zIndex","RangeWrap","Element","Handle","borderRadius","border","outline","boxShadow","borderColor","AspectWrap","HandleDecoration","flex","display","flexDirection","alignItems","justifyContent","pointerEvents","HandleCanvasWrap","HandleWrap","flexShrink","DefaultHandle","rest","React","ComparisonSlider","itemOne","itemTwo","aspectRatio","defaultValue","value","handle","handleBefore","handleAfter","orientation","onValueChange","onlyHandleDraggable","focused","setFocused","localValue","setLocalValue","isControlled","isHorizontal","sliderValue","padding","clipPath","handleChange","ItemOne","ItemTwo","baseSlides","direction","Direction","slides","style","paddingBottom","index","key","step","min","max","values","onChange","renderTrack","props","children","className","renderThumb","params","isFocused","onFocus","onBlur"],"mappings":"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","sourcesContent":["const aspectRatioRegex = new RegExp(/(\\d+)(:|x)(\\d+)/);\n\nexport function calculateAspectRatio(ratio: number | string) {\n  const asNumber = Number(ratio);\n  const asString = String(ratio);\n\n  const isNumber = !isNaN(asNumber);\n\n  if (isNumber) {\n    return (1 / asNumber) * 100;\n  } else {\n    const match = asString.match(aspectRatioRegex);\n    if (!match)\n      throw Error(\n        'Please use a valid aspect ratio delimeter, either \"x\" or \":\"'\n      );\n\n    const width = Number(match[1]);\n    const height = Number(match[3]);\n    return (height / width) * 100;\n  }\n}\n\nexport function isFunction(functionToCheck: Function) {\n  return (\n    functionToCheck && {}.toString.call(functionToCheck) === '[object Function]'\n  );\n}\n","import React, { FC } from 'react';\nimport { Direction, Range } from 'react-range';\nimport { IThumbProps } from 'react-range/lib/types';\nimport { styled } from '@stitches/react';\n\nimport { calculateAspectRatio, isFunction } from './util';\n\nexport interface ComparisonSliderHandleProps extends IThumbProps {\n  isFocused: boolean;\n}\n\nexport type ComparisonSliderProps = ComparisonSliderStatefulProps &\n  ComparisonSliderCommonProps;\n\ninterface ComparisonSliderCommonProps {\n  itemOne:\n    | React.ReactNode\n    | (({ value }: { value: number }) => React.ReactNode);\n  itemTwo:\n    | React.ReactNode\n    | (({ value }: { value: number }) => React.ReactNode);\n  aspectRatio: number | string;\n  handleBefore?: React.ReactNode;\n  handleAfter?: React.ReactNode;\n  handle?: (props: ComparisonSliderHandleProps) => React.ReactNode;\n  orientation?: 'vertical' | 'horizontal';\n  onlyHandleDraggable?: boolean;\n}\n\ntype ComparisonSliderStatefulProps =\n  | { defaultValue: number; value?: never; onValueChange?: never }\n  | {\n      value: number;\n      onValueChange: (value: number) => void;\n      defaultValue?: never;\n    };\n\nconst PinnedDiv = styled('div', {\n  width: '100%',\n  height: '100%',\n  top: 0,\n  left: 0,\n  right: 0,\n  bottom: 0,\n  position: 'absolute',\n});\n\nconst Track = styled(PinnedDiv, {\n  background: 'transparent',\n  zIndex: 10,\n});\n\nconst RangeWrap = PinnedDiv;\n\nconst Element = styled(PinnedDiv, {\n  '> *': {\n    height: '100%',\n  },\n\n  '> *:not(style) + *': {\n    height: 'unset',\n  },\n});\n\nconst Handle = styled('div', {\n  width: 16,\n  height: 16,\n  background: 'white',\n  borderRadius: '100%',\n  border: '1px solid transparent',\n  '&:focus': {\n    outline: 'none',\n    boxShadow: '0 0 0 2px rgba(0, 0, 0, 0.25)',\n    borderColor: 'rgba(0, 0, 0, 1)',\n  },\n});\n\nconst AspectWrap = styled('div', {\n  height: 0,\n  position: 'relative',\n});\n\nconst HandleDecoration = styled('div', {\n  flex: '1 1 0%',\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'center',\n  justifyContent: 'center',\n  pointerEvents: 'all',\n});\n\nconst HandleCanvasWrap = styled('div', {\n  display: 'flex',\n  '&:focus': {\n    outline: 'none',\n  },\n});\n\nconst HandleWrap = styled('div', {\n  flexShrink: 0,\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  zIndex: 1,\n});\n\nconst DefaultHandle = (props: ComparisonSliderHandleProps) => {\n  const { isFocused, ...rest } = props;\n  return <Handle {...rest}></Handle>;\n};\n\nexport const ComparisonSlider: FC<ComparisonSliderProps> = ({\n  itemOne,\n  itemTwo,\n  aspectRatio,\n  defaultValue,\n  value,\n  handle = DefaultHandle,\n  handleBefore = null,\n  handleAfter = null,\n  orientation = 'horizontal',\n  onValueChange = () => {},\n  onlyHandleDraggable = false,\n}) => {\n  const [focused, setFocused] = React.useState(false);\n  const [localValue, setLocalValue] = React.useState(defaultValue);\n  const isControlled =\n    typeof defaultValue === 'undefined' && typeof value !== 'undefined';\n\n  const isHorizontal = orientation === 'horizontal';\n\n  const sliderValue = (isControlled ? value : localValue) as number;\n\n  const padding = calculateAspectRatio(aspectRatio);\n  const clipPath = isHorizontal\n    ? `polygon(${sliderValue}% 0, 100% 0%, 100% 100%, ${sliderValue}% 100%)`\n    : `polygon(0% 100%, 0% ${100 - sliderValue}%, 100% ${\n        100 - sliderValue\n      }%, 100% 100%)`;\n\n  const handleChange = (newValue: number) => {\n    if (isControlled) {\n      onValueChange(newValue);\n    } else {\n      setLocalValue(newValue);\n    }\n  };\n\n  const ItemOne =\n    itemOne && isFunction(itemOne as Function)\n      ? (itemOne as Function)({ value: sliderValue })\n      : itemOne;\n\n  const ItemTwo =\n    itemTwo && isFunction(itemTwo as Function)\n      ? (itemTwo as Function)({ value: sliderValue })\n      : itemTwo;\n\n  const baseSlides = [\n    <React.Fragment>{ItemOne}</React.Fragment>,\n    <React.Fragment>{ItemTwo}</React.Fragment>,\n  ];\n\n  const direction = isHorizontal ? Direction.Right : Direction.Up;\n\n  const slides = isHorizontal ? baseSlides : baseSlides.reverse();\n\n  return (\n    <AspectWrap style={{ paddingBottom: `${padding}%` }}>\n      <React.Fragment>\n        {slides.map((content, index) => {\n          return (\n            <Element\n              style={{ clipPath: index === 1 ? clipPath : '' }}\n              key={index}\n            >\n              {content}\n            </Element>\n          );\n        })}\n      </React.Fragment>\n\n      <RangeWrap>\n        <Range\n          step={1}\n          min={0}\n          max={100}\n          values={[sliderValue]}\n          onChange={(values) => handleChange(values[0])}\n          direction={direction}\n          renderTrack={({ props, children }) => (\n            <Track\n              className=\"\"\n              {...props}\n              style={{\n                ...props.style,\n                pointerEvents: onlyHandleDraggable ? 'none' : 'all',\n              }}\n            >\n              {children}\n            </Track>\n          )}\n          renderThumb={(params) => {\n            let props: ComparisonSliderHandleProps = {\n              ...params.props,\n              isFocused: focused,\n            };\n            return (\n              <HandleCanvasWrap\n                {...params.props}\n                style={{\n                  ...params.props.style,\n                  flexDirection: isHorizontal ? 'column' : 'row',\n                  height: isHorizontal ? '100%' : 'auto',\n                  width: isHorizontal ? 'auto' : '100%',\n                }}\n                onFocus={() => setFocused(true)}\n                onBlur={() => setFocused(false)}\n              >\n                <HandleDecoration>{handleBefore}</HandleDecoration>\n                <HandleWrap style={{ pointerEvents: 'all' }}>\n                  {/* @ts-ignore */}\n                  {handle(props)}\n                </HandleWrap>\n                <HandleDecoration>{handleAfter}</HandleDecoration>\n              </HandleCanvasWrap>\n            );\n          }}\n        />\n      </RangeWrap>\n    </AspectWrap>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}