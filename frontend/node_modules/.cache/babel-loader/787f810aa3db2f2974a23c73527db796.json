{"ast":null,"code":"var _jsxFileName = \"D:\\\\projects React\\\\Demo\\\\frontend\\\\src\\\\screens\\\\CategoryEditScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Button, Form } from 'react-bootstrap-v5';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport FormContainer from '../components/FormContainer';\nimport { listCategoryDetails, updateCategory } from '../actions/categoryActions';\nimport { CATEGORY_DETAILS_RESET, CATEGORY_UPDATE_RESET } from '../constants/categoryConstants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst CategoryEditScreen = ({\n  match,\n  history\n}) => {\n  _s();\n\n  const categoryId = match.params.id;\n  const [name, setName] = useState('');\n  const [description, setDescription] = useState('');\n  const [message, setMessage] = useState(null);\n  const dispatch = useDispatch();\n  const categoryDetails = useSelector(state => state.categoryDetails);\n  const {\n    loading,\n    error,\n    category\n  } = categoryDetails;\n  const categoryUpdate = useSelector(state => state.categoryUpdate);\n  const {\n    loading: loadingUpdate,\n    error: errorUpdate,\n    success: successUpdate\n  } = categoryUpdate;\n  useEffect(() => {\n    if (successUpdate) {\n      dispatch({\n        type: CATEGORY_UPDATE_RESET\n      });\n      dispatch({\n        type: CATEGORY_DETAILS_RESET\n      });\n      history.push('/admin/categorylist');\n    } else {\n      if (!category || category._id !== categoryId) {\n        dispatch(listCategoryDetails(categoryId));\n      } else {\n        setName(category.name);\n        setDescription(category.description);\n      }\n    }\n  }, [dispatch, history, categoryId, category, successUpdate]);\n\n  const submitHandler = e => {\n    e.preventDefault();\n\n    if (name.trim() === \"\") {\n      setMessage('Name must not be empty !');\n    } else if (description.trim() === \"\") {\n      setMessage('Description must not be empty !');\n    } else {\n      dispatch(updateCategory(categoryId, name, description));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      to: \"/admin/categorylist\",\n      className: \"btn btn-light my-3\",\n      children: \" Go Back \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FormContainer, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Edit Category\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this), loadingUpdate && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 35\n      }, this), errorUpdate && /*#__PURE__*/_jsxDEV(Message, {\n        variant: \"danger\",\n        children: errorUpdate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 33\n      }, this), loading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 28\n      }, this) : error ? /*#__PURE__*/_jsxDEV(Message, {\n        variant: \"danger\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 31\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [message && /*#__PURE__*/_jsxDEV(Message, {\n          variant: \"danger\",\n          children: [\" \", message, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 45\n        }, this), /*#__PURE__*/_jsxDEV(Form, {\n          onSubmit: submitHandler,\n          children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"name\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"name\",\n              placeholder: \"Enter name\",\n              value: name,\n              onChange: e => setName(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"description\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              placeholder: \"Enter description\",\n              value: description,\n              onChange: e => setDescription(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            variant: \"primary\",\n            children: \"Update\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 33\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(CategoryEditScreen, \"OaS5EuV42t4abyBGAerJdp1cr4A=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = CategoryEditScreen;\nexport default CategoryEditScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"CategoryEditScreen\");","map":{"version":3,"sources":["D:/projects React/Demo/frontend/src/screens/CategoryEditScreen.js"],"names":["React","useState","useEffect","Link","useDispatch","useSelector","Button","Form","Message","Loader","FormContainer","listCategoryDetails","updateCategory","CATEGORY_DETAILS_RESET","CATEGORY_UPDATE_RESET","CategoryEditScreen","match","history","categoryId","params","id","name","setName","description","setDescription","message","setMessage","dispatch","categoryDetails","state","loading","error","category","categoryUpdate","loadingUpdate","errorUpdate","success","successUpdate","type","push","_id","submitHandler","e","preventDefault","trim","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Button, Form } from 'react-bootstrap-v5'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\nimport FormContainer from '../components/FormContainer'\r\nimport { listCategoryDetails, updateCategory } from '../actions/categoryActions'\r\nimport { CATEGORY_DETAILS_RESET, CATEGORY_UPDATE_RESET } from '../constants/categoryConstants'\r\n\r\nconst CategoryEditScreen = ({ match, history }) => {\r\n    const categoryId = match.params.id\r\n\r\n    const [name, setName] = useState('')\r\n    const [description, setDescription] = useState('')\r\n    const [message, setMessage] = useState(null)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const categoryDetails = useSelector(state => state.categoryDetails)\r\n    const { loading, error, category } = categoryDetails\r\n\r\n    const categoryUpdate = useSelector(state => state.categoryUpdate)\r\n    const { loading: loadingUpdate, error: errorUpdate, success: successUpdate } = categoryUpdate\r\n\r\n    useEffect(() => {\r\n        if (successUpdate) {\r\n            dispatch({ type: CATEGORY_UPDATE_RESET })\r\n            dispatch({ type: CATEGORY_DETAILS_RESET })\r\n            history.push('/admin/categorylist')\r\n        } else {\r\n\r\n            if (!category || category._id !== categoryId) {\r\n                dispatch(listCategoryDetails(categoryId))\r\n\r\n            } else {\r\n                setName(category.name)\r\n                setDescription(category.description)\r\n            }\r\n        }\r\n\r\n    }, [dispatch, history, categoryId, category, successUpdate])\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        if (name.trim() === \"\") {\r\n            setMessage('Name must not be empty !')\r\n        }\r\n        else if (description.trim() === \"\") {\r\n            setMessage('Description must not be empty !')\r\n        }\r\n        else {\r\n            dispatch(updateCategory(categoryId, name, description))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Link to='/admin/categorylist' className='btn btn-light my-3'> Go Back </Link>\r\n\r\n            <FormContainer>\r\n                <h1>Edit Category</h1>\r\n                {loadingUpdate && <Loader />}\r\n                {errorUpdate && <Message variant='danger'>{errorUpdate}</Message>}\r\n                {loading ? <Loader />\r\n                    : error ? <Message variant='danger'>{error}</Message>\r\n                        : (\r\n                            <>\r\n                                {message && <Message variant='danger'> {message} </Message>}\r\n\r\n                                <Form onSubmit={submitHandler}>\r\n                                    <Form.Group controlId='name'>\r\n                                        <Form.Label>Name</Form.Label>\r\n                                        <Form.Control type='name' placeholder='Enter name' value={name}\r\n                                            onChange={(e) => setName(e.target.value)}></Form.Control>\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group controlId='description'>\r\n                                        <Form.Label>Description</Form.Label>\r\n                                        <Form.Control type='text' placeholder='Enter description' value={description}\r\n                                            onChange={(e) => setDescription(e.target.value)}></Form.Control>\r\n                                    </Form.Group>\r\n\r\n                                    <Button type='submit' variant='primary'>\r\n                                        Update\r\n                                    </Button>\r\n                                </Form>\r\n                            </>\r\n                        )\r\n                }\r\n            </FormContainer>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CategoryEditScreen"]},"metadata":{},"sourceType":"module"}