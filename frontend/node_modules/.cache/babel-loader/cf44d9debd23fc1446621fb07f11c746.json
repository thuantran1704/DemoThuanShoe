{"ast":null,"code":"var _jsxFileName = \"D:\\\\projects React\\\\Demo\\\\frontend\\\\src\\\\screens\\\\ProductEditScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Button, Form, Col, Row, Image } from 'react-bootstrap-v5';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport FormContainer from '../components/FormContainer';\nimport { listProductDetails, updateProduct } from '../actions/productActions';\nimport { PRODUCT_UPDATE_RESET } from '../constants/productConstants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ProductEditScreen = ({\n  match,\n  history\n}) => {\n  _s();\n\n  const productId = match.params.id;\n  const [name, setName] = useState('');\n  const [price, setPrice] = useState(0);\n  const [images, setImages] = useState([]);\n  const [brand, setBrand] = useState('');\n  const [category, setCategory] = useState('');\n  const [description, setDescription] = useState('');\n  const [uploading] = useState(false);\n  const [message, setMessage] = useState(null);\n  const dispatch = useDispatch();\n  const brandList = useSelector(state => state.brandList);\n  const {\n    brands\n  } = brandList;\n  const categoryList = useSelector(state => state.categoryList);\n  const {\n    categories\n  } = categoryList;\n  const productDetails = useSelector(state => state.productDetails);\n  const {\n    loading,\n    error,\n    product\n  } = productDetails;\n  const productUpdate = useSelector(state => state.productUpdate);\n  const {\n    loading: loadingUpdate,\n    error: errorUpdate,\n    success: successUpdate\n  } = productUpdate;\n  useEffect(() => {\n    if (successUpdate) {\n      dispatch({\n        type: PRODUCT_UPDATE_RESET\n      });\n      history.push('/admin/productlist');\n    } else {\n      if (product._id !== productId) {\n        dispatch(listProductDetails(productId));\n      } else {\n        setName(product.name);\n        setPrice(product.price);\n        setBrand(product.brand.brand);\n        setImages(product.images);\n        setCategory(product.category.category);\n        setDescription(product.description);\n      }\n    }\n  }, [dispatch, history, productId, product, successUpdate]);\n\n  const submitHandler = e => {\n    e.preventDefault();\n\n    if (name.trim() === \"\") {\n      setMessage('Name must not be empty !');\n    } else if (price <= 0) {\n      setMessage('Price must be greater than 0 !');\n    } else if (images.length === 0) {\n      setMessage('Must have at least 1 image !');\n    } else if (brand.trim() === \"\") {\n      setMessage('Brand must not be empty !');\n    } else if (category.trim() === \"\") {\n      setMessage('Category must not be empty !');\n    } else if (description.trim() === \"\") {\n      setMessage('Description must not be empty !');\n    } else {\n      dispatch(updateProduct(productId, name, price, images, brand, category, description));\n    }\n  };\n\n  const uploadFileHandler = async e => {\n    const file = e.target.files[0];\n\n    if (!file) {\n      return alert.error('File not exist!');\n    }\n\n    if (file.type !== 'image/jpeg' && file.type !== 'image/jpg' && file.type !== 'image/png') {\n      return alert.error('File format is incorrect!');\n    }\n\n    if (file.size > 1024 * 1024 * 5) {\n      return alert.error('File too large!');\n    }\n\n    let formData = new FormData();\n    formData.append('file', file);\n    const res = await axios.post('/api/upload', formData, {\n      headers: {\n        'content-type': 'multipart/form-data'\n      }\n    });\n    console.log(res.data);\n    setImages(oldArray => [...oldArray, res.data]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      to: \"/admin/productlist\",\n      className: \"btn btn-light my-3\",\n      children: \" Go Back \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FormContainer, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Edit Product\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this), loadingUpdate && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 35\n      }, this), errorUpdate && /*#__PURE__*/_jsxDEV(Message, {\n        variant: \"danger\",\n        children: errorUpdate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 33\n      }, this), loading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 28\n      }, this) : error ? /*#__PURE__*/_jsxDEV(Message, {\n        variant: \"danger\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 31\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [message && /*#__PURE__*/_jsxDEV(Message, {\n          variant: \"danger\",\n          children: [\" \", message, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 45\n        }, this), /*#__PURE__*/_jsxDEV(Form, {\n          onSubmit: submitHandler,\n          children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"name\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"name\",\n              placeholder: \"Enter name\",\n              value: name,\n              onChange: e => setName(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"price\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Price\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"number\",\n              placeholder: \"Enter price\",\n              value: price,\n              onChange: e => setPrice(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"image1\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Image From Left\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 41\n            }, this), !images[0] ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n                type: \"text\",\n                placeholder: \"Enter image URL\",\n                value: images,\n                onChange: e => setImages[0](e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 137,\n                columnNumber: 53\n              }, this), /*#__PURE__*/_jsxDEV(Form.File, {\n                id: \"image-file\" // label='Choose Image'\n                ,\n                custom: true,\n                onChange: uploadFileHandler\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 139,\n                columnNumber: 53\n              }, this)]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: /*#__PURE__*/_jsxDEV(Image, {\n                src: images[0].url,\n                width: \"120\",\n                height: \"120\",\n                style: {\n                  marginLeft: \"20px\"\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 148,\n                columnNumber: 53\n              }, this)\n            }, void 0, false), uploading && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 55\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"image2\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Image From Left\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 41\n            }, this), !images[1] ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n                type: \"text\",\n                placeholder: \"Enter image URL\",\n                value: images,\n                onChange: e => setImages[1](e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 160,\n                columnNumber: 53\n              }, this), /*#__PURE__*/_jsxDEV(Form.File, {\n                id: \"image-file\" // label='Choose Image'\n                ,\n                custom: true,\n                onChange: uploadFileHandler\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 162,\n                columnNumber: 53\n              }, this)]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(Image, {\n                src: images[1].url,\n                width: \"120\",\n                height: \"120\",\n                style: {\n                  marginLeft: \"20px\"\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 171,\n                columnNumber: 53\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                type: \"text\",\n                placeholder: \"Enter image URL\",\n                value: images,\n                onChange: e => setImages[1](e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 172,\n                columnNumber: 53\n              }, this), /*#__PURE__*/_jsxDEV(Form.File, {\n                id: \"image-file\" // label='Choose Image'\n                ,\n                custom: true,\n                onChange: uploadFileHandler\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 174,\n                columnNumber: 53\n              }, this)]\n            }, void 0, true), uploading && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 55\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(Row, {\n            children: [/*#__PURE__*/_jsxDEV(Col, {\n              md: 5,\n              children: /*#__PURE__*/_jsxDEV(Form.Group, {\n                controlId: \"brand\",\n                children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                  children: \"Brand\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 227,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(Form.Select, {\n                  \"aria-label\": \"Floating label select example\",\n                  value: brand,\n                  onChange: e => setBrand(e.target.value),\n                  children: brands && brands.map(brand => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: brand._id,\n                    children: brand.name\n                  }, brand._id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 233,\n                    columnNumber: 57\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 229,\n                  columnNumber: 49\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 226,\n                columnNumber: 45\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 225,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              md: 1\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              md: 5,\n              children: /*#__PURE__*/_jsxDEV(Form.Group, {\n                controlId: \"category\",\n                children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                  children: \"Category\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 242,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(Form.Select, {\n                  \"aria-label\": \"Floating label select example\",\n                  value: category,\n                  onChange: e => setCategory(e.target.value),\n                  children: categories && categories.map(category => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: `${category._id}`,\n                    children: category.name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 248,\n                    columnNumber: 57\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 244,\n                  columnNumber: 49\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 241,\n                columnNumber: 45\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"description\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 257,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              placeholder: \"Enter description\",\n              value: description,\n              onChange: e => setDescription(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 258,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            variant: \"primary\",\n            children: \"Update\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 33\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ProductEditScreen, \"hRFx4uqepxBGld4eoZrbAJgiPX0=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = ProductEditScreen;\nexport default ProductEditScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductEditScreen\");","map":{"version":3,"sources":["D:/projects React/Demo/frontend/src/screens/ProductEditScreen.js"],"names":["React","useState","useEffect","axios","Link","useDispatch","useSelector","Button","Form","Col","Row","Image","Message","Loader","FormContainer","listProductDetails","updateProduct","PRODUCT_UPDATE_RESET","ProductEditScreen","match","history","productId","params","id","name","setName","price","setPrice","images","setImages","brand","setBrand","category","setCategory","description","setDescription","uploading","message","setMessage","dispatch","brandList","state","brands","categoryList","categories","productDetails","loading","error","product","productUpdate","loadingUpdate","errorUpdate","success","successUpdate","type","push","_id","submitHandler","e","preventDefault","trim","length","uploadFileHandler","file","target","files","alert","size","formData","FormData","append","res","post","headers","console","log","data","oldArray","value","url","marginLeft","map"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport { Link } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Button, Form, Col, Row, Image } from 'react-bootstrap-v5'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\nimport FormContainer from '../components/FormContainer'\r\nimport { listProductDetails, updateProduct } from '../actions/productActions'\r\nimport { PRODUCT_UPDATE_RESET } from '../constants/productConstants'\r\n\r\nconst ProductEditScreen = ({ match, history }) => {\r\n    const productId = match.params.id\r\n    const [name, setName] = useState('')\r\n    const [price, setPrice] = useState(0)\r\n    const [images, setImages] = useState([])\r\n    const [brand, setBrand] = useState('')\r\n    const [category, setCategory] = useState('')\r\n    const [description, setDescription] = useState('')\r\n    const [uploading] = useState(false)\r\n    const [message, setMessage] = useState(null)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const brandList = useSelector(state => state.brandList)\r\n    const { brands } = brandList\r\n    const categoryList = useSelector(state => state.categoryList)\r\n    const { categories } = categoryList\r\n\r\n    const productDetails = useSelector(state => state.productDetails)\r\n    const { loading, error, product } = productDetails\r\n\r\n    const productUpdate = useSelector(state => state.productUpdate)\r\n    const { loading: loadingUpdate, error: errorUpdate, success: successUpdate } = productUpdate\r\n    useEffect(() => {\r\n        if (successUpdate) {\r\n            dispatch({ type: PRODUCT_UPDATE_RESET })\r\n            history.push('/admin/productlist')\r\n        } else {\r\n            if (product._id !== productId) {\r\n                dispatch(listProductDetails(productId))\r\n            } else {\r\n                setName(product.name)\r\n                setPrice(product.price)\r\n                setBrand(product.brand.brand)\r\n                setImages(product.images)\r\n                setCategory(product.category.category)\r\n                setDescription(product.description)\r\n            }\r\n        }\r\n\r\n    }, [dispatch, history, productId, product, successUpdate])\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        if (name.trim() === \"\") {\r\n            setMessage('Name must not be empty !')\r\n        }\r\n\r\n        else if (price <= 0) {\r\n            setMessage('Price must be greater than 0 !')\r\n        }\r\n        else if (images.length === 0) {\r\n            setMessage('Must have at least 1 image !')\r\n        }\r\n        else if (brand.trim() === \"\") {\r\n            setMessage('Brand must not be empty !')\r\n        }\r\n        else if (category.trim() === \"\") {\r\n            setMessage('Category must not be empty !')\r\n        }\r\n        else if (description.trim() === \"\") {\r\n            setMessage('Description must not be empty !')\r\n        }\r\n        \r\n        else {\r\n            dispatch(updateProduct(productId, name, price, images, brand, category, description))\r\n        }\r\n    }\r\n\r\n    const uploadFileHandler = async (e) => {\r\n        const file = e.target.files[0]\r\n        if (!file) {\r\n            return alert.error('File not exist!')\r\n        }\r\n        if (file.type !== 'image/jpeg' && file.type !== 'image/jpg' && file.type !== 'image/png') {\r\n            return alert.error('File format is incorrect!')\r\n        }\r\n        if (file.size > 1024 * 1024 * 5) {\r\n            return alert.error('File too large!')\r\n        }\r\n\r\n        let formData = new FormData()\r\n        formData.append('file', file)\r\n\r\n        const res = await axios.post('/api/upload', formData, {\r\n            headers: { 'content-type': 'multipart/form-data' }\r\n        })\r\n        console.log(res.data);\r\n        setImages(oldArray => [...oldArray, res.data])\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Link to='/admin/productlist' className='btn btn-light my-3'> Go Back </Link>\r\n\r\n            <FormContainer>\r\n                <h1>Edit Product</h1>\r\n                {loadingUpdate && <Loader />}\r\n                {errorUpdate && <Message variant='danger'>{errorUpdate}</Message>}\r\n                {loading ? <Loader />\r\n                    : error ? <Message variant='danger'>{error}</Message>\r\n                        : (\r\n                            <>\r\n                                {message && <Message variant='danger'> {message} </Message>}\r\n\r\n                                <Form onSubmit={submitHandler}>\r\n                                    <Form.Group controlId='name'>\r\n                                        <Form.Label>Name</Form.Label>\r\n                                        <Form.Control type='name' placeholder='Enter name' value={name}\r\n                                            onChange={(e) => setName(e.target.value)}></Form.Control>\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group controlId='price'>\r\n                                        <Form.Label>Price</Form.Label>\r\n                                        <Form.Control type='number' placeholder='Enter price' value={price}\r\n                                            onChange={(e) => setPrice(e.target.value)}></Form.Control>\r\n                                    </Form.Group>\r\n\r\n\r\n                                    <Form.Group controlId='image1'>\r\n                                        <Form.Label>Image From Left</Form.Label>\r\n                                        {!images[0] ?\r\n                                            (\r\n                                                <>\r\n                                                    <Form.Control type='text' placeholder='Enter image URL' value={images}\r\n                                                        onChange={(e) => setImages[0](e.target.value)}></Form.Control>\r\n                                                    <Form.File id='image-file'\r\n                                                        // label='Choose Image'\r\n                                                        custom\r\n                                                        onChange={uploadFileHandler}>\r\n\r\n                                                    </Form.File>\r\n                                                </>\r\n                                            ) : (\r\n                                                <>\r\n                                                    <Image src={images[0].url} width=\"120\" height=\"120\" style={{ marginLeft: \"20px\" }} />\r\n                                                    \r\n                                                </>\r\n                                            )}\r\n                                        {uploading && <Loader />}\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group controlId='image2'>\r\n                                        <Form.Label>Image From Left</Form.Label>\r\n                                        {!images[1] ?\r\n                                            (\r\n                                                <>\r\n                                                    <Form.Control type='text' placeholder='Enter image URL' value={images}\r\n                                                        onChange={(e) => setImages[1](e.target.value)}></Form.Control>\r\n                                                    <Form.File id='image-file'\r\n                                                        // label='Choose Image'\r\n                                                        custom\r\n                                                        onChange={uploadFileHandler}>\r\n\r\n                                                    </Form.File>\r\n                                                </>\r\n                                            ) : (\r\n                                                <>\r\n                                                    <Image src={images[1].url} width=\"120\" height=\"120\" style={{ marginLeft: \"20px\" }} />\r\n                                                    <Form.Control type='text' placeholder='Enter image URL' value={images}\r\n                                                        onChange={(e) => setImages[1](e.target.value)}></Form.Control>\r\n                                                    <Form.File id='image-file'\r\n                                                        // label='Choose Image'\r\n                                                        custom\r\n                                                        onChange={uploadFileHandler}>\r\n\r\n                                                    </Form.File>\r\n                                                </>\r\n                                            )}\r\n                                        {uploading && <Loader />}\r\n                                    </Form.Group>\r\n\r\n                                    {/* <Form.Group controlId='image2'>\r\n                                    <Form.Label>Image From Right</Form.Label>\r\n                                    <Form.Control type='text' placeholder='Enter image URL' value={images}\r\n                                        onChange={(e) => setImages[1](e.target.value)}> </Form.Control>\r\n                                    <Form.File id='image-file'\r\n                                        // label='Choose Image'\r\n                                        custom\r\n                                        onChange={uploadFileHandler}>\r\n\r\n                                    </Form.File>\r\n                                    {uploading && <Loader />}\r\n                                </Form.Group> */}\r\n\r\n                                    {/* <Form.Group controlId='image3'>\r\n                                    <Form.Label>Image From Front</Form.Label>\r\n                                    <Form.Control type='text' placeholder='Enter image URL' value={images}\r\n                                        onChange={(e) => setImages[2](e.target.value)}></Form.Control>\r\n                                    <Form.File id='image-file'\r\n                                        // label='Choose Image'\r\n                                        custom\r\n                                        onChange={uploadFileHandler}>\r\n\r\n                                    </Form.File>\r\n                                    {uploading && <Loader />}\r\n                                </Form.Group>\r\n\r\n                                <Form.Group controlId='image4'>\r\n                                    <Form.Label>Image From Behind</Form.Label>\r\n                                    <Form.Control type='text' placeholder='Enter image URL' value={images}\r\n                                        onChange={(e) => setImages[3](e.target.value)}></Form.Control>\r\n                                    <Form.File id='image-file'\r\n                                        // label='Choose Image'\r\n                                        custom\r\n                                        onChange={uploadFileHandler}>\r\n\r\n                                    </Form.File>\r\n                                    {uploading && <Loader />}\r\n                                </Form.Group> */}\r\n\r\n                                    <Row>\r\n                                        <Col md={5}>\r\n                                            <Form.Group controlId='brand'>\r\n                                                <Form.Label>Brand</Form.Label>\r\n\r\n                                                <Form.Select aria-label=\"Floating label select example\" value={brand}\r\n                                                    onChange={(e) => setBrand(e.target.value)}>\r\n\r\n                                                    {brands && brands.map(brand => (\r\n                                                        <option key={brand._id} value={brand._id}>{brand.name}</option>\r\n                                                    ))}\r\n                                                </Form.Select>\r\n\r\n                                            </Form.Group>\r\n                                        </Col>\r\n                                        <Col md={1} />\r\n                                        <Col md={5}>\r\n                                            <Form.Group controlId='category'>\r\n                                                <Form.Label>Category</Form.Label>\r\n\r\n                                                <Form.Select aria-label=\"Floating label select example\" value={category}\r\n                                                    onChange={(e) => setCategory(e.target.value)}>\r\n\r\n                                                    {categories && categories.map(category => (\r\n                                                        <option value={`${category._id}`}>{category.name}</option>\r\n                                                    ))}\r\n                                                </Form.Select>\r\n\r\n                                            </Form.Group>\r\n                                        </Col>\r\n                                    </Row>\r\n\r\n                                    <Form.Group controlId='description'>\r\n                                        <Form.Label>Description</Form.Label>\r\n                                        <Form.Control type='text' placeholder='Enter description' value={description}\r\n                                            onChange={(e) => setDescription(e.target.value)}></Form.Control>\r\n                                    </Form.Group>\r\n\r\n                                    <Button type='submit' variant='primary'>\r\n                                        Update\r\n                                    </Button>\r\n                                </Form>\r\n                            </>\r\n                        )\r\n                }\r\n            </FormContainer>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProductEditScreen"]},"metadata":{},"sourceType":"module"}